<!DOCTYPE html>

<html lang="id">
  <head>
    <meta charset="UTF-8" />

    <meta
      name="viewport"
      content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"
    />
    <title>Session <%= session.id %></title>

    <script src="https://cdn.tailwindcss.com"></script>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"
      rel="stylesheet"
    />

    <style>
      .gradient-bg {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      }

      .card-hover {
        transition: all 0.3s ease;
      }

      .card-hover:hover {
        transform: translateY(-2px);

        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
      }

      .status-connected {
        background: linear-gradient(135deg, #10b981, #059669);
      }

      .status-connecting {
        background: linear-gradient(135deg, #f59e0b, #d97706);
      }

      .status-disconnected {
        background: linear-gradient(135deg, #6b7280, #4b5563);
      }

      /* Mobile Responsive Styles */
      @media (max-width: 1024px) {
        .container {
          padding: 1rem;
        }

        .grid-cols-1.lg\\:grid-cols-3 {
          grid-template-columns: 1fr;
        }

        .lg\\:grid-cols-3 > * {
          grid-column: span 1;
        }
      }

      @media (max-width: 768px) {
        .container {
          padding: 0.75rem;
        }

        .gradient-bg .container {
          padding: 1rem;
        }

        .text-2xl {
          font-size: 1.25rem;
        }

        .text-lg {
          font-size: 1rem;
        }

        .p-4 {
          padding: 0.75rem;
        }

        .space-y-6 > * + * {
          margin-top: 1rem;
        }

        .space-y-4 > * + * {
          margin-top: 0.75rem;
        }

        /* Session cards mobile optimization */
        .bg-white.rounded-2xl {
          padding: 0.75rem;
        }

        /* Action buttons mobile */
        .grid.grid-cols-2 {
          grid-template-columns: 1fr;
          gap: 0.5rem;
        }

        .grid.grid-cols-2 button {
          width: 100%;
        }

        /* Form elements mobile */
        .flex.space-x-2 {
          flex-direction: column;
          gap: 0.5rem;
        }

        .flex.space-x-2 > * {
          width: 100%;
        }

        /* Textarea mobile */
        textarea {
          min-height: 80px;
          font-size: 16px; /* Prevent zoom on iOS */
        }

        /* Input mobile */
        input {
          font-size: 16px; /* Prevent zoom on iOS */
        }

        /* Modal adjustments */
        .max-w-md {
          max-width: 90vw;
          margin: 1rem;
        }

        .p-6 {
          padding: 1.5rem;
        }
      }

      @media (max-width: 480px) {
        .container {
          padding: 0.5rem;
        }

        .gradient-bg .container {
          padding: 0.75rem;
        }

        .text-xl {
          font-size: 1.125rem;
        }

        .p-4 {
          padding: 0.5rem;
        }

        /* Very small cards */
        .bg-white.rounded-2xl {
          padding: 0.5rem;
        }

        /* Header adjustments */
        .flex.items-center.justify-between {
          flex-direction: column;
          gap: 0.5rem;
          text-align: center;
        }

        .flex.items-center.space-x-4 {
          flex-direction: column;
          gap: 0.5rem;
        }

        .flex.items-center.space-x-2 {
          flex-direction: column;
          gap: 0.5rem;
        }

        /* Button adjustments */
        .bg-gradient-to-r {
          padding: 0.5rem 0.75rem;
          font-size: 0.875rem;
        }

        /* Modal very small */
        .max-w-md {
          max-width: 95vw;
          margin: 0.5rem;
        }

        .p-6 {
          padding: 1rem;
        }

        /* QR code mobile */
        .w-64.h-64 {
          width: 200px;
          height: 200px;
        }
      }

      /* Touch-friendly buttons */
      @media (hover: none) && (pointer: coarse) {
        .card-hover:hover {
          transform: none;
        }

        button {
          min-height: 44px;
          min-width: 44px;
        }

        .grid.grid-cols-2 button {
          min-height: 40px;
        }
      }

      /* Additional mobile optimizations */
      @media (max-width: 768px) {
        /* Ensure all text is readable */
        body {
          font-size: 14px;
        }

        /* Make sure buttons are touch-friendly */
        button,
        .btn,
        input[type="button"],
        input[type="submit"] {
          min-height: 44px;
          min-width: 44px;
        }

        /* Improve form elements */
        input,
        textarea,
        select {
          font-size: 16px; /* Prevent zoom on iOS */
          padding: 12px;
        }

        /* Better spacing for mobile */
        .space-y-6 > * + * {
          margin-top: 1.5rem;
        }

        .space-y-4 > * + * {
          margin-top: 1rem;
        }

        /* Improve modal on mobile */
        .fixed.inset-0 {
          padding: 1rem;
        }

        /* Better QR code display */
        .w-64.h-64 {
          width: 250px;
          height: 250px;
          max-width: 80vw;
          max-height: 80vw;
        }

        /* Form improvements */
        .space-y-3 > * + * {
          margin-top: 0.75rem;
        }

        /* Better button layout */
        .flex.space-x-2 {
          flex-direction: column;
          gap: 0.75rem;
        }

        .flex.space-x-2 > * {
          width: 100%;
        }
      }

      /* L&&scape mobile optimization */
      @media (max-width: 768px) && (orientation: l&&scape) {
        .container {
          padding: 0.5rem;
        }

        .space-y-6 > * + * {
          margin-top: 1rem;
        }

        .space-y-4 > * + * {
          margin-top: 0.75rem;
        }

        .space-y-3 > * + * {
          margin-top: 0.5rem;
        }
      }
    </style>
  </head>

  <body class="bg-gradient-to-br from-gray-50 to-gray-100 min-h-screen">
    <!-- Modern Header -->

    <div class="gradient-bg shadow-lg">
      <div class="container mx-auto px-6 py-4">
        <div class="flex items-center justify-between">
          <div class="flex items-center space-x-4">
            <div class="bg-white bg-opacity-20 p-3 rounded-xl">
              <i class="fas fa-robot text-white text-2xl"></i>
            </div>

            <div>
              <h1 class="text-2xl font-bold text-white">Session Management</h1>

              <p class="text-blue-100 text-sm">Session ID: <%= session.id %></p>
            </div>
          </div>

          <!-- Back to Dashboard -->

          <a
            href="/dashboard"
            class="bg-white bg-opacity-20 hover:bg-opacity-30 text-white px-4 py-2 rounded-lg transition-all duration-300 flex items-center space-x-2"
          >
            <i class="fas fa-arrow-left"></i>

            <span>Back to Dashboard</span>
          </a>
        </div>
      </div>
    </div>

    <div class="container mx-auto p-4 lg:p-6 -mt-4">
      <!-- Three Column Layout -->

      <div class="grid grid-cols-1 lg:grid-cols-3 gap-4 lg:gap-6">
        <!-- Left Column: Session Management -->

        <div class="space-y-4 lg:space-y-6">
          <!-- Status + Actions -->

          <div
            class="bg-white rounded-2xl shadow-xl p-4 card-hover border border-gray-100"
          >
            <!-- Status Bar -->

            <div class="flex items-center justify-between mb-4">
              <div class="flex items-center space-x-2">
                <div
                  class="p-2 rounded-lg <%= session.status === 'connected' ? 'status-connected' : session.status === 'connecting' ? 'status-connecting' : 'status-disconnected' %>"
                >
                  <i
                    class="fas fa-<%= session.status === 'connected' ? 'check-circle' : session.status === 'connecting' ? 'spinner fa-spin' : 'times-circle' %> text-white text-sm"
                  ></i>
                </div>

                <div>
                  <div
                    class="text-xs font-medium text-gray-500 uppercase tracking-wide"
                  >
                    Status
                  </div>

                  <div class="text-sm font-bold text-gray-800 capitalize">
                    <%= session.status %>
                  </div>
                </div>
              </div>

              <!-- Session ID Badge -->

              <div
                class="bg-gray-100 text-gray-600 px-2 py-1 rounded-md text-xs font-mono"
              >
                <%= session.id %>
              </div>
            </div>

            <!-- Action Buttons -->

            <div class="space-y-2">
              <!-- Primary Action Button -->

              <% if (session.status !== 'connected') { %>

              <button
                onclick="openQRModal('<%= session.id %>')"
                class="w-full bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white px-4 py-2 rounded-lg transition-all duration-300 flex items-center justify-center space-x-2 shadow-md hover:shadow-lg text-sm font-medium"
              >
                <i class="fas fa-qrcode"></i>

                <span>Connect WhatsApp</span>
              </button>

              <% } else { %>

              <button
                onclick="disconnectSession('<%= session.id %>')"
                class="w-full bg-gradient-to-r from-orange-500 to-orange-600 hover:from-orange-600 hover:to-orange-700 text-white px-4 py-2 rounded-lg transition-all duration-300 flex items-center justify-center space-x-2 shadow-md hover:shadow-lg text-sm font-medium"
              >
                <i class="fas fa-pause"></i>

                <span>Disconnect</span>
              </button>

              <% } %>

              <!-- Secondary Action Buttons -->

              <div class="grid grid-cols-2 gap-2">
                <button
                  onclick="forceCleanupSession('<%= session.id %>')"
                  class="bg-gradient-to-r from-yellow-500 to-yellow-600 hover:from-yellow-600 hover:to-yellow-700 text-white px-3 py-2 rounded-lg transition-all duration-300 flex items-center justify-center space-x-2 shadow-sm hover:shadow-md text-xs font-medium"
                >
                  <i class="fas fa-broom"></i>

                  <span>Reset</span>
                </button>

                <button
                  onclick="deleteSessionPermanently('<%= session.id %>')"
                  class="bg-gradient-to-r from-red-500 to-red-600 hover:from-red-600 hover:to-red-700 text-white px-3 py-2 rounded-lg transition-all duration-300 flex items-center justify-center space-x-2 shadow-sm hover:shadow-md text-xs font-medium"
                >
                  <i class="fas fa-trash-alt"></i>

                  <span>Delete</span>
                </button>
              </div>
            </div>
          </div>

          <!-- Groups -->

          <div
            class="bg-white rounded-2xl shadow-xl p-4 card-hover border border-gray-100"
          >
            <div class="flex items-center justify-between mb-4">
              <div class="flex items-center space-x-2">
                <div class="p-2 bg-blue-100 rounded-lg">
                  <i class="fas fa-users text-blue-600"></i>
                </div>

                <div>
                  <h2 class="text-lg font-bold text-gray-800">Groups</h2>

                  <p class="text-xs text-gray-500">Manage conversations</p>
                </div>
              </div>

              <button
                class="bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white px-3 py-2 rounded-lg transition-all duration-300 flex items-center space-x-2 shadow-sm hover:shadow-md text-xs font-medium"
                onclick="refreshGroups()"
              >
                <i class="fas fa-sync-alt"></i>

                <span>Refresh</span>
              </button>
            </div>

            <!-- Debug session data -->
            <script>
              console.log("📋 Session data in template:", <%= JSON.stringify(session) %>);
              console.log("📋 Groups data in template:", <%= JSON.stringify(session.groups) %>);
              console.log("📋 Groups length:", <%= session.groups ? session.groups.length : 0 %>);
              console.log("📋 Menus data in template:", <%= JSON.stringify(session.menus) %>);
              console.log("📋 Menus length:", <%= session.menus ? session.menus.length : 0 %>);
              console.log("📋 Current menu ID in template:", "<%= session.current_menu_id %>");
              console.log("📋 Current menu ID type:", typeof "<%= session.current_menu_id %>");
              
              // Debug dropdown selection
              console.log("📋 === DROPDOWN SELECTION DEBUG ===");
              console.log("📋 Current menu ID (raw):", "<%= session.current_menu_id %>");
              console.log("📋 Current menu ID (parsed):", parseInt("<%= session.current_menu_id %>"));
              console.log("📋 Current menu ID (type):", typeof parseInt("<%= session.current_menu_id %>"));
              
              <% if (session.menus && session.menus.length > 0) { %>
                <% session.menus.forEach(menu => { %>
                  console.log("📋 Menu ID:", <%= menu.id %>, "Type:", typeof <%= menu.id %>);
                  console.log("📋 Comparison:", parseInt("<%= session.current_menu_id %>"), "===", parseInt("<%= menu.id %>"), "=", parseInt("<%= session.current_menu_id %>") === parseInt("<%= menu.id %>"));
                <% }) %>
              <% } %>
            </script>

            <% if (session.groups && session.groups.length > 0) { %>

            <div class="space-y-1 max-h-64 overflow-y-auto">
              <% session.groups.forEach(g => { %>

              <div
                class="bg-gray-50 rounded-md p-2 border border-gray-200 hover:bg-gray-100 transition-all duration-200"
              >
                <div class="flex items-center justify-between gap-2">
                  <div class="flex-1 min-w-0">
                    <div
                      class="font-medium text-gray-800 text-xs truncate mb-1"
                    >
                      <%= g.name %>
                    </div>

                    <div class="text-xs text-gray-500 font-mono truncate">
                      <%= g.jid %>
                    </div>
                  </div>

                  <button
                    class="bg-gray-400 hover:bg-gray-500 text-white px-2 py-1 rounded text-xs transition-colors flex-shrink-0"
                    onclick="copyToClipboard('<%= g.jid %>')"
                    title="Copy Group ID"
                  >
                    <i class="fas fa-copy"></i>
                  </button>
                </div>
              </div>

              <% }) %>
            </div>

            <% } else { %>

            <!-- Debug: Groups empty condition -->
            <script>
              console.log("📋 Groups empty condition triggered");
              console.log("📋 session.groups:", <%= JSON.stringify(session.groups) %>);
              <% 
                const hasGroups = session.groups && session.groups.length > 0;
              %>
              console.log("📋 session.groups && length > 0:", <%= hasGroups %>);
            </script>

            <div class="text-center py-8">
              <div
                class="bg-gray-100 rounded-full w-12 h-12 flex items-center justify-center mx-auto mb-3"
              >
                <i class="fas fa-users-slash text-gray-400"></i>
              </div>

              <div class="text-gray-600 font-semibold text-sm mb-1">
                <% if (session.status === 'connected') { %>
                  <% if (session.groups && session.groups.length > 0) { %>
                    No Groups Found
                  <% } else { %>
                    No WhatsApp Groups
                  <% } %>
                <% } else { %>
                  Session Not Connected
                <% } %>
              </div>

              <div class="text-gray-500 text-xs">
                <% if (session.status === 'connected') { %>
                  <% if (session.groups && session.groups.length > 0) { %>
                    No groups available in this session
                  <% } else { %>
                    This WhatsApp account has no groups
                  <% } %>
                <% } else { %>
                  Connect to WhatsApp to see groups
                <% } %>
              </div>
            </div>

            <% } %>
          </div>

          <!-- Test Chat -->

          <div
            class="bg-white rounded-2xl shadow-xl p-4 card-hover border border-gray-100"
          >
            <div class="flex items-center space-x-2 mb-4">
              <div class="p-2 bg-green-100 rounded-lg">
                <i class="fas fa-comment-dots text-green-600"></i>
              </div>

              <div>
                <h2 class="text-lg font-bold text-gray-800">Test Chat</h2>

                <p class="text-xs text-gray-500">Send test messages</p>
              </div>
            </div>

            <form id="sendMessageForm" class="space-y-3">
              <input
                type="hidden"
                id="sessionIdInput"
                value="<%= session.id %>"
              />

              <div class="flex space-x-2">
                <div class="flex-1">
                  <label class="block text-xs font-semibold text-gray-700 mb-1">
                    Recipient
                  </label>

                  <input
                    id="toInput"
                    class="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300 text-xs"
                    placeholder="Phone or group ID..."
                  />
                </div>

                <div class="flex items-end">
                  <button
                    type="button"
                    class="<%= session.status === 'connected' ? 'bg-gradient-to-r from-purple-500 to-purple-600 hover:from-purple-600 hover:to-purple-700 text-white' : 'bg-gray-400 text-gray-200 cursor-not-allowed' %> px-3 py-2 rounded-lg transition-all duration-300 flex items-center space-x-2 shadow-sm hover:shadow-md text-xs font-medium"
                    onclick="<%= session.status === 'connected' ? 'showGroupSelector()' : 'showNotConnectedAlert()' %>"
                    <%= session.status !== 'connected' ? 'disabled' : '' %>
                    title="<%= session.status === 'connected' ? 'Pilih grup untuk mengirim pesan' : 'Session harus terhubung untuk melihat grup' %>"
                  >
                    <i class="fas fa-list"></i>

                    <span>Groups</span>
                  </button>
                </div>
              </div>

              <div>
                <label class="block text-xs font-semibold text-gray-700 mb-1">
                  Message
                </label>

                <textarea
                  id="messageInput"
                  class="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300 resize-none text-xs"
                  rows="3"
                  placeholder="Type your message..."
                ></textarea>
              </div>

              <div class="flex space-x-2">
                <button
                  id="sendBtn"
                  class="flex-1 bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white px-3 py-2 rounded-lg transition-all duration-300 flex items-center justify-center space-x-2 shadow-md hover:shadow-lg text-xs font-medium"
                  type="submit"
                >
                  <i class="fas fa-paper-plane"></i>

                  <span>Send Message</span>
                </button>

                <button
                  class="bg-gradient-to-r from-gray-400 to-gray-500 hover:from-gray-500 hover:to-gray-600 text-white px-3 py-2 rounded-lg transition-all duration-300 flex items-center space-x-2 shadow-sm hover:shadow-md text-xs font-medium"
                  type="button"
                  onclick="clearForm()"
                >
                  <i class="fas fa-trash"></i>

                  <span>Clear</span>
                </button>
              </div>

              <div id="sendMessageResult" class="hidden mt-2"></div>
            </form>
          </div>
        </div>

        <!-- Middle Column: Bot Settings & Test -->

        <div class="space-y-3 lg:space-y-4">
          <!-- Current Menu Settings -->

          <div
            class="bg-white rounded-2xl shadow-xl p-4 card-hover border border-gray-100"
          >
            <div class="flex items-center space-x-2 mb-4">
              <div class="p-2 bg-blue-100 rounded-lg">
                <i class="fas fa-list-alt text-blue-600"></i>
              </div>

              <div>
                <h2 class="text-lg font-bold text-gray-800">Current Menu</h2>

                <p class="text-xs text-gray-500">
                  Set active menu for this session
                </p>
              </div>
            </div>

            <!-- Current Menu Selector -->

            <div class="mb-4">
              <div
                class="bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg p-3 border border-blue-200"
              >
                <label class="block text-sm font-semibold text-gray-700 mb-2">
                  Select Current Menu
                </label>

                <select
                  id="currentMenuSelect"
                  class="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300 text-sm"
                >
                  <option value="">Select a menu...</option>
                  <% if (session.menus && session.menus.length > 0) { %>
                    <% session.menus.forEach(menu => { %>
                      <% 
                        const isSelected = session.current_menu_id ? parseInt(session.current_menu_id) === parseInt(menu.id) : false;
                      %>
                      <option value="<%= menu.id %>" <%= isSelected ? 'selected' : '' %>>
                        <%= menu.name %> (ID: <%= menu.id %>)
                      </option>
                    <% }) %>
                  <% } else { %>
                    <option value="">No menus available</option>
                  <% } %>
                </select>

                <div class="mt-2 flex space-x-2">
                  <button
                    id="updateCurrentMenuBtn"
                    onclick="updateCurrentMenu()"
                    class="flex-1 bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white px-3 py-2 rounded-lg transition-all duration-300 flex items-center justify-center space-x-2 shadow-sm hover:shadow-md text-xs font-medium"
                  >
                    <i class="fas fa-save"></i>
                    <span>Update Menu</span>
                  </button>

                  <button
                    onclick="resetCurrentMenu()"
                    class="bg-gradient-to-r from-gray-400 to-gray-500 hover:from-gray-500 hover:to-gray-600 text-white px-3 py-2 rounded-lg transition-all duration-300 flex items-center space-x-2 shadow-sm hover:shadow-md text-xs font-medium"
                  >
                    <i class="fas fa-undo"></i>
                    <span>Reset</span>
                  </button>
                </div>

                <div class="mt-2 text-xs text-gray-600">
                  <strong>Current Menu ID:</strong>
                  <span id="currentMenuIdDisplay">
                    <%= session.current_menu_id || 'None' %>
                  </span>
                </div>
              </div>
            </div>
          </div>

          <!-- Bot Settings -->

          <div
            class="bg-white rounded-2xl shadow-xl p-4 card-hover border border-gray-100"
          >
            <div class="flex items-center space-x-2 mb-4">
              <div class="p-2 bg-purple-100 rounded-lg">
                <i class="fas fa-cogs text-purple-600"></i>
              </div>

              <div>
                <h2 class="text-lg font-bold text-gray-800">Bot Settings</h2>

                <p class="text-xs text-gray-500">Configure responses</p>
              </div>
            </div>

            <!-- Auto-Reply Toggle -->

            <div class="mb-4">
              <div
                class="bg-gradient-to-r from-gray-50 to-gray-100 rounded-lg p-3 border border-gray-200"
              >
                <label class="flex items-center space-x-3 cursor-pointer">
                  <div class="relative">
                    <input
                      type="checkbox"
                      id="autoReplyToggle"
                      checked
                      class="sr-only"
                    />

                    <div
                      class="w-10 h-5 bg-gray-300 rounded-full shadow-inner transition-colors duration-300"
                      id="toggleBg"
                    >
                      <div
                        class="w-4 h-4 bg-white rounded-full shadow transform transition-transform duration-300 translate-x-5"
                        id="toggleCircle"
                      ></div>
                    </div>
                  </div>

                  <div>
                    <span class="text-sm font-bold text-gray-800"
                      >Enable Auto-Reply</span
                    >

                    <p class="text-xs text-gray-600 mt-1">
                      Bot akan membalas pesan masuk
                    </p>
                  </div>
                </label>
              </div>
            </div>
          </div>
        </div>

        <!-- Right Column: Bot Documentation -->

        <div class="space-y-3 lg:space-y-4">
          <!-- Documentation -->

          <div
            class="bg-white rounded-2xl shadow-xl p-4 card-hover border border-gray-100"
          >
            <div class="flex items-center space-x-2 mb-4">
              <div class="p-2 bg-indigo-100 rounded-lg">
                <i class="fas fa-book text-indigo-600"></i>
              </div>

              <div>
                <h2 class="text-lg font-bold text-gray-800">Documentation</h2>

                <p class="text-xs text-gray-500">Bot guide & examples</p>
              </div>
            </div>

            <div class="space-y-3">
              <!-- Quick Start Guide -->

              <div
                class="bg-gradient-to-r from-green-50 to-emerald-50 rounded-lg p-3 border border-green-200"
              >
                <div class="flex items-center space-x-2 mb-2">
                  <i class="fas fa-rocket text-green-600 text-sm"></i>

                  <h3 class="font-bold text-gray-800 text-sm">Quick Start</h3>
                </div>

                <div class="space-y-1 text-xs text-gray-700">
                  <div class="flex items-start space-x-2">
                    <span
                      class="bg-green-500 text-white rounded-full w-4 h-4 flex items-center justify-center text-xs font-bold"
                      >1</span
                    >

                    <span>Connect WhatsApp session</span>
                  </div>

                  <div class="flex items-start space-x-2">
                    <span
                      class="bg-green-500 text-white rounded-full w-4 h-4 flex items-center justify-center text-xs font-bold"
                      >2</span
                    >

                    <span>Select bot type (Menu Bot)</span>
                  </div>

                  <div class="flex items-start space-x-2">
                    <span
                      class="bg-green-500 text-white rounded-full w-4 h-4 flex items-center justify-center text-xs font-bold"
                      >3</span
                    >

                    <span>Enable auto-reply toggle</span>
                  </div>

                  <div class="flex items-start space-x-2">
                    <span
                      class="bg-green-500 text-white rounded-full w-4 h-4 flex items-center justify-center text-xs font-bold"
                      >4</span
                    >

                    <span>Customize responses (optional)</span>
                  </div>

                  <div class="flex items-start space-x-2">
                    <span
                      class="bg-green-500 text-white rounded-full w-4 h-4 flex items-center justify-center text-xs font-bold"
                      >5</span
                    >

                    <span>Save && test menu bot</span>
                  </div>
                </div>
              </div>

              <!-- Bot Logic Implementation -->

              <div
                class="bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg p-3 border border-blue-200"
              >
                <div class="flex items-center space-x-2 mb-2">
                  <i class="fas fa-code text-blue-600 text-sm"></i>

                  <h3 class="font-bold text-gray-800 text-sm">Bot Logic</h3>
                </div>

                <div
                  class="bg-gray-900 rounded-lg p-2 text-xs text-green-400 font-mono overflow-x-auto"
                >
                  <div class="text-gray-300 mb-1">
                    // Session-Specific Bot Logic:
                  </div>

                  <div>function generateBotResponse(msg, settings) {</div>

                  <div class="ml-2">const text = msg.toLowerCase();</div>

                  <div class="ml-2">if (text.includes('halo')) {</div>

                  <div class="ml-4">
                    return settings.responses.greetingResponse;
                  </div>

                  <div class="ml-2">} else if (text.includes('info')) {</div>

                  <div class="ml-4">
                    return settings.responses.infoResponse;
                  </div>

                  <div class="ml-2">} else {</div>

                  <div class="ml-4">
                    return settings.responses.defaultResponse;
                  </div>

                  <div class="ml-2">}</div>

                  <div>}</div>
                </div>
              </div>

              <!-- API Integration -->

              <div
                class="bg-gradient-to-r from-purple-50 to-pink-50 rounded-lg p-3 border border-purple-200"
              >
                <div class="flex items-center space-x-2 mb-2">
                  <i class="fas fa-plug text-purple-600 text-sm"></i>

                  <h3 class="font-bold text-gray-800 text-sm">
                    API Integration
                  </h3>
                </div>

                <div class="space-y-2 text-xs">
                  <div class="bg-gray-50 rounded p-2">
                    <div class="font-semibold text-gray-800 mb-1">
                      Bot Settings:
                    </div>

                    <div class="text-gray-600 font-mono text-xs">
                      POST /api/botSettings<br />

                      GET /api/botSettings/:sessionId
                    </div>
                  </div>

                  <div class="bg-gray-50 rounded p-2">
                    <div class="font-semibold text-gray-800 mb-1">
                      Bot Types:
                    </div>

                    <div class="text-gray-600 font-mono text-xs">
                      GET /api/botTypes<br />

                      GET /api/botConfig/:botType
                    </div>
                  </div>

                  <div class="bg-gray-50 rounded p-2">
                    <div class="font-semibold text-gray-800 mb-1">
                      Send Message:
                    </div>

                    <div class="text-gray-600 font-mono text-xs">
                      POST /api/sendMessage
                    </div>
                  </div>
                </div>
              </div>

              <!-- Bot Keywords Reference -->

              <div
                class="bg-gradient-to-r from-yellow-50 to-orange-50 rounded-lg p-3 border border-yellow-200"
              >
                <div class="flex items-center space-x-2 mb-2">
                  <i class="fas fa-key text-yellow-600 text-sm"></i>

                  <h3 class="font-bold text-gray-800 text-sm">Keywords</h3>
                </div>

                <div class="grid grid-cols-2 gap-1 text-xs">
                  <div class="bg-white rounded p-2 border">
                    <div class="font-semibold text-gray-800">Greeting</div>

                    <div class="text-gray-600">
                      halo, hi, hello, hai, assalamualaikum, selamat
                    </div>
                  </div>

                  <div class="bg-white rounded p-2 border">
                    <div class="font-semibold text-gray-800">Info</div>

                    <div class="text-gray-600">
                      info, informasi, help, bantuan, menu
                    </div>
                  </div>

                  <div class="bg-white rounded p-2 border">
                    <div class="font-semibold text-gray-800">Thanks</div>

                    <div class="text-gray-600">
                      terima kasih, thanks, makasih, bye, selamat tinggal
                    </div>
                  </div>

                  <div class="bg-white rounded p-2 border">
                    <div class="font-semibold text-gray-800">Default</div>

                    <div class="text-gray-600">Other messages</div>
                  </div>
                </div>

                <div class="mt-2 text-xs text-gray-600">
                  <strong>Bot Type Specific:</strong> Marketing (promo, diskon,
                  harga), Support (error, masalah, bug), Customer Service
                  (komplain, keluhan, saran)
                </div>
              </div>

              <!-- Configuration -->

              <div
                class="bg-gradient-to-r from-indigo-50 to-blue-50 rounded-lg p-3 border border-indigo-200"
              >
                <div class="flex items-center space-x-2 mb-2">
                  <i class="fas fa-cogs text-indigo-600 text-sm"></i>

                  <h3 class="font-bold text-gray-800 text-sm">Configuration</h3>
                </div>

                <div class="space-y-1 text-xs text-gray-700">
                  <div class="flex items-center justify-between">
                    <span>Bot Type:</span>

                    <span
                      class="bg-indigo-100 text-indigo-800 px-2 py-1 rounded text-xs"
                      id="currentBotType"
                      >General</span
                    >
                  </div>

                  <div class="flex items-center justify-between">
                    <span>Auto-reply:</span>

                    <span
                      class="bg-green-100 text-green-800 px-2 py-1 rounded text-xs"
                      >✓ Active</span
                    >
                  </div>

                  <div class="flex items-center justify-between">
                    <span>Group Reply:</span>

                    <span
                      class="bg-yellow-100 text-yellow-800 px-2 py-1 rounded text-xs"
                      id="groupReplyStatus"
                      >Depends on Type</span
                    >
                  </div>

                  <div class="flex items-center justify-between">
                    <span>Media Support:</span>

                    <span
                      class="bg-blue-100 text-blue-800 px-2 py-1 rounded text-xs"
                      id="mediaSupportStatus"
                      >Depends on Type</span
                    >
                  </div>

                  <div class="flex items-center justify-between">
                    <span>Real-time:</span>

                    <span
                      class="bg-purple-100 text-purple-800 px-2 py-1 rounded text-xs"
                      >✓ Active</span
                    >
                  </div>
                </div>
              </div>

              <!-- Implementation for Other Programs -->

              <div
                class="bg-gradient-to-r from-red-50 to-pink-50 rounded-lg p-3 border border-red-200"
              >
                <div class="flex items-center space-x-2 mb-2">
                  <i class="fas fa-external-link-alt text-red-600 text-sm"></i>

                  <h3 class="font-bold text-gray-800 text-sm">
                    For Other Programs
                  </h3>
                </div>

                <div class="space-y-2 text-xs">
                  <div class="bg-white rounded p-2 border">
                    <div class="font-semibold text-gray-800 mb-1">Node.js:</div>

                    <div class="text-gray-600 font-mono text-xs">
                      const settings = botSettings[sessionId];<br />

                      const response = generateBotResponse(msg, settings);
                    </div>
                  </div>

                  <div class="bg-white rounded p-2 border">
                    <div class="font-semibold text-gray-800 mb-1">Python:</div>

                    <div class="text-gray-600 font-mono text-xs">
                      settings = bot_settings[session_id]<br />

                      response = generate_bot_response(msg, settings)
                    </div>
                  </div>

                  <div class="bg-white rounded p-2 border">
                    <div class="font-semibold text-gray-800 mb-1">PHP:</div>

                    <div class="text-gray-600 font-mono text-xs">
                      $settings = $botSettings[$sessionId];<br />

                      $response = generateBotResponse($msg, $settings);
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Modern QR Modal -->

    <div
      id="qrModal"
      class="hidden fixed inset-0 bg-black bg-opacity-60 backdrop-blur-sm flex items-center justify-center z-50"
      onclick="closeQRModal()"
    >
      <div
        class="bg-white rounded-3xl shadow-2xl max-w-md w-full mx-4 overflow-hidden"
        onclick="event.stopPropagation()"
      >
        <!-- Modal Header -->

        <div class="gradient-bg p-6 text-center">
          <div
            class="bg-white bg-opacity-20 p-3 rounded-full w-16 h-16 mx-auto mb-4"
          >
            <i class="fas fa-qrcode text-white text-2xl"></i>
          </div>

          <h2 class="text-2xl font-bold text-white mb-2">Scan QR Code</h2>

          <p class="text-blue-100 text-sm">
            Connect your WhatsApp to this session
          </p>
        </div>

        <!-- Modal Body -->

        <div class="p-6">
          <div id="qrContainer" class="mb-6">
            <div class="text-center">
              <div
                class="animate-spin rounded-full h-16 w-16 border-4 border-blue-200 border-t-blue-500 mx-auto mb-4"
              ></div>

              <p class="text-gray-600 font-medium">Loading QR code...</p>

              <p class="text-gray-400 text-sm mt-1">Please wait a moment</p>
            </div>
          </div>

          <!-- Modal Actions -->

          <div class="flex space-x-3">
            <button
              onclick="refreshQR()"
              class="flex-1 bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white px-4 py-3 rounded-xl transition-all duration-300 flex items-center justify-center space-x-2 shadow-lg hover:shadow-xl"
            >
              <i class="fas fa-sync-alt"></i>

              <span>Refresh</span>
            </button>

            <button
              onclick="closeQRModal()"
              class="bg-gray-200 hover:bg-gray-300 text-gray-700 px-4 py-3 rounded-xl transition-all duration-300 flex items-center space-x-2"
            >
              <i class="fas fa-times"></i>

              <span>Close</span>
            </button>
          </div>
        </div>
      </div>
    </div>

    <script>
      let qrInterval;

      let currentSessionId = null;

      function isGroupId(input) {
        return input.includes("@g.us");
      }

      function formatPhoneNumber(p) {
        if (!p) return p;

        if (isGroupId(p) || p.includes("@s.whatsapp.net")) return p;

        let c = p.replace(/[^\d]/g, "");

        if (c.startsWith("08")) c = "62" + c.slice(1);
        else if (c.startsWith("8")) c = "62" + c;

        return c;
      }

      async function copyToClipboard(t) {
        console.log("📋 Copy to clipboard called with:", t);
        console.log("📋 Parameter type:", typeof t);

        try {
          // Validate parameter
          if (!t || typeof t !== "string") {
            throw new Error(`Invalid parameter: ${t}`);
          }

          await navigator.clipboard.writeText(t);
          console.log("📋 Clipboard write successful");
        } catch (err) {
          console.error(
            "📋 Clipboard API failed, using fallback:",
            err.message
          );

          try {
            const textArea = document.createElement("textarea");
            textArea.value = t;
            document.body.appendChild(textArea);
            textArea.select();
            document.execComm&&("copy");
            document.body.removeChild(textArea);
            console.log("📋 Fallback copy successful");
          } catch (fallbackErr) {
            console.error("📋 Fallback copy failed:", fallbackErr.message);
            throw fallbackErr;
          }
        }

        if (window.Swal) {
          Swal.fire({
            toast: true,
            position: "top",
            timer: 1500,
            showConfirmButton: false,
            icon: "success",
            title: "Group ID copied to clipboard!",
          });
        } else {
          alert("Group ID copied to clipboard!");
        }
      }

      // Send Message Form H&&ler

      document

        .getElementById("sendMessageForm")

        .addEventListener("submit", async (e) => {
          e.preventDefault();

          const sessionId = document.getElementById("sessionIdInput").value;

          const to = formatPhoneNumber(
            document.getElementById("toInput").value.trim()
          );

          const message = document.getElementById("messageInput").value.trim();

          const isGroup = isGroupId(to);

          const sendBtn = document.getElementById("sendBtn");

          const resDiv = document.getElementById("sendMessageResult");

          if (!sessionId || !to || !message) {
            Swal.fire({
              icon: "warning",

              title: "Data tidak lengkap",

              text: "Harap lengkapi semua kolom.",
            });

            return;
          }

          sendBtn.disabled = true;

          sendBtn.textContent = "⏳ Sending...";

          try {
            const res = await fetch("/api/sendMessage", {
              method: "POST",

              headers: { "Content-Type": "application/json" },

              body: JSON.stringify({ sessionId, to, message, isGroup }),
            });

            const data = await res.json();

            if (data.success) {
              Swal.fire({
                toast: true,

                position: "top",

                timer: 1500,

                showConfirmButton: false,

                icon: "success",

                title: "Pesan terkirim!",
              });

              clearForm();
            } else {
              Swal.fire({
                icon: "error",

                title: "Gagal mengirim pesan",

                text: data.error,
              });
            }
          } catch (err) {
            Swal.fire({
              icon: "error",

              title: "Network Error",

              text: err.message,
            });
          } finally {
            sendBtn.disabled = false;

            sendBtn.textContent = "📤 Send";
          }
        });

      function clearForm() {
        document.getElementById("sendMessageForm").reset();

        document.getElementById("sendMessageResult").classList.add("hidden");
      }

      // Show alert when session is not connected
      function showNotConnectedAlert() {
        Swal.fire({
          icon: "warning",
          title: "Session Tidak Terhubung",
          text: "Session harus terhubung ke WhatsApp terlebih dahulu untuk melihat daftar grup.",
          confirmButtonText: "OK"
        });
      }

      // Group Selector with SweetAlert2

      async function showGroupSelector() {
        console.log("📋 showGroupSelector called");

        const sessionId = document.getElementById("sessionIdInput").value;
        console.log("📋 Session ID:", sessionId);

        if (!sessionId) {
          console.warn("📋 No session ID found");
          Swal.fire({
            icon: "warning",
            title: "Pilih Session",
            text: "Harap pilih session terlebih dahulu.",
          });
          return;
        }

        try {
          console.log("📋 Fetching sessions from /api/getSessions...");
          const res = await fetch("/api/getSessions");
          console.log("📋 Response status:", res.status);
          console.log("📋 Response ok:", res.ok);

          if (!res.ok) {
            throw new Error(`HTTP error! status: ${res.status}`);
          }

          const data = await res.json();
          console.log("📋 Sessions data received:", data);
          console.log(
            "📋 Sessions count:",
            data.sessions ? data.sessions.length : 0
          );

          if (!data.sessions || !Array.isArray(data.sessions)) {
            throw new Error("Invalid sessions data format");
          }

          const session = data.sessions.find((s) => s.id === sessionId);
          console.log("📋 Found session:", session);
          console.log(
            "📋 Session groups:",
            session ? session.groups : "No session found"
          );

          if (!session || !session.groups || session.groups.length === 0) {
            console.warn("📋 No groups found for session");
            
            let title, text;
            if (!session) {
              title = "Session Tidak Ditemukan";
              text = "Session tidak ditemukan atau tidak valid.";
            } else if (session.status !== "connected") {
              title = "Session Tidak Terhubung";
              text = "Session harus terhubung ke WhatsApp terlebih dahulu untuk melihat daftar grup.";
            } else {
              title = "Tidak Ada Grup WhatsApp";
              text = "Akun WhatsApp ini tidak bergabung dengan grup apapun.";
            }
            
            Swal.fire({
              icon: "info",
              title: title,
              text: text,
            });
            return;
          }

          const inputOptions = {};

          session.groups.forEach((g) => {
            inputOptions[g.jid] = `${g.name} (${g.jid})`;
          });

          const { value: selectedGroupJid } = await Swal.fire({
            title: "Pilih Grup",

            input: "select",

            inputOptions: inputOptions,

            inputPlaceholder: "Pilih grup...",

            showCancelButton: true,

            inputValidator: (value) => {
              return new Promise((resolve) => {
                if (value) {
                  resolve();
                } else {
                  resolve("Anda perlu memilih grup!");
                }
              });
            },
          });

          if (selectedGroupJid) {
            document.getElementById("toInput").value = selectedGroupJid;
          }
        } catch (err) {
          console.error("❌ Error in showGroupSelector:", err);
          console.error("❌ Error message:", err.message);
          console.error("❌ Error stack:", err.stack);

          Swal.fire({
            icon: "error",
            title: "Gagal memuat grup",
            text: `Error: ${err.message}`,
          });
        }
      }

      // QR Functions

      async function fetchQR(sessionId) {
        try {
          const res = await fetch(`/api/getQR/${sessionId}`);

          const data = await res.json();

          const container = document.getElementById("qrContainer");

          if (data.error) {
            container.innerHTML = `

              <div class="text-center">

                <div class="text-red-500 text-4xl mb-4">❌</div>

                <p class="text-red-600 font-semibold">Session not found</p>

                <p class="text-sm text-gray-600">${data.error}</p>

              </div>

            `;

            return;
          }

          if (data.status === "connected") {
            container.innerHTML = `

              <div class="text-center">

                <div class="text-green-500 text-4xl mb-4">✅</div>

                <p class="text-green-600 font-semibold">Connected!</p>

                <p class="text-sm text-gray-600">Session is now active</p>

              </div>

            `;

            clearInterval(qrInterval);

            // Show success notification

            Swal.fire({
              icon: "success",

              title: "Connected!",

              text: "WhatsApp session connected successfully!",

              timer: 2000,

              showConfirmButton: false,
            });

            // Close modal && reload page immediately

            setTimeout(() => {
              closeQRModal();

              location.reload();
            }, 1000);

            return;
          }

          if (data.qr && data.qr.trim() !== "") {
            container.innerHTML = `

              <div class="text-center">

                <img src="${data.qr}" class="mx-auto w-64 h-64 border-2 border-gray-300 rounded-lg mb-4" alt="QR Code"/>

                <p class="text-sm text-gray-600">Scan this QR code with WhatsApp</p>

                <p class="text-xs text-gray-500 mt-1">Status: ${data.status}</p>

                <div class="mt-2">

                  <div class="animate-pulse text-blue-500 text-xs">Waiting for scan...</div>

                </div>

              </div>

            `;

            // Continue polling for connection status - don't clear interval
          } else {
            container.innerHTML = `

              <div class="text-center">

                <div class="animate-spin rounded-full h-16 w-16 border-b-2 border-blue-500 mx-auto"></div>

                <p class="mt-4 text-gray-600">Generating QR code...</p>

                <p class="text-xs text-gray-500 mt-1">Status: ${
                  data.status || "unknown"
                }</p>

              </div>

            `;
          }
        } catch (error) {
          console.error("QR fetch error:", error);

          const container = document.getElementById("qrContainer");

          container.innerHTML = `

            <div class="text-center">

              <div class="text-red-500 text-4xl mb-4">❌</div>

              <p class="text-red-600 font-semibold">Network Error</p>

              <p class="text-sm text-gray-600">${error.message}</p>

            </div>

          `;
        }
      }

      function openQRModal(sessionId) {
        currentSessionId = sessionId;

        document.getElementById("qrModal").classList.remove("hidden");

        const container = document.getElementById("qrContainer");

        container.innerHTML = `

          <div class="text-center">

            <div class="animate-spin rounded-full h-16 w-16 border-b-2 border-blue-500 mx-auto"></div>

            <p class="mt-4 text-gray-600">Initializing...</p>

          </div>

        `;

        clearInterval(qrInterval);

        fetch("/api/connect", {
          method: "POST",

          headers: { "Content-Type": "application/json" },

          body: JSON.stringify({ sessionId }),
        })
          .then(() => {
            setTimeout(() => {
              qrInterval = setInterval(() => {
                fetchQR(sessionId);
              }, 1000); // Poll every 1 second for faster response
            }, 1000);
          })

          .catch((error) => {
            console.error("Connection failed:", error);

            container.innerHTML = `

            <div class="text-center">

              <div class="text-red-500 text-4xl mb-4">❌</div>

              <p class="text-red-600 font-semibold">Connection Failed</p>

              <p class="text-sm text-gray-600">${error.message}</p>

            </div>

          `;
          });
      }

      function closeQRModal() {
        document.getElementById("qrModal").classList.add("hidden");

        clearInterval(qrInterval);

        currentSessionId = null;
      }

      function refreshQR() {
        if (!currentSessionId) return;

        clearInterval(qrInterval);

        const container = document.getElementById("qrContainer");

        container.innerHTML = `

          <div class="text-center">

            <div class="animate-spin rounded-full h-16 w-16 border-b-2 border-blue-500 mx-auto"></div>

            <p class="mt-4 text-gray-600">Refreshing...</p>

          </div>

        `;

        fetch("/api/connect", {
          method: "POST",

          headers: { "Content-Type": "application/json" },

          body: JSON.stringify({ sessionId: currentSessionId }),
        })
          .then(() => {
            setTimeout(() => {
              qrInterval = setInterval(() => {
                fetchQR(currentSessionId);
              }, 1000); // Poll every 1 second for faster response
            }, 1000);
          })

          .catch((error) => {
            console.error("Refresh failed:", error);

            container.innerHTML = `

            <div class="text-center">

              <div class="text-red-500 text-4xl mb-4">❌</div>

              <p class="text-red-600 font-semibold">Refresh Failed</p>

              <p class="text-sm text-gray-600">${error.message}</p>

            </div>

          `;
          });
      }

      // Session Management Functions

      async function disconnectSession(id) {
        const conf = await Swal.fire({
          icon: "warning",

          title: "Disconnect Session",

          text: `Yakin disconnect session ${id}?`,

          showCancelButton: true,

          confirmButtonText: "Disconnect",
        });

        if (!conf.isConfirmed) return;

        try {
          const res = await fetch("/api/disconnect", {
            method: "POST",

            headers: { "Content-Type": "application/json" },

            body: JSON.stringify({ sessionId: id }),
          });

          const data = await res.json();

          if (data.success) {
            Swal.fire({ icon: "success", title: "Disconnected" });
          } else {
            Swal.fire({ icon: "error", title: "Error", text: data.error });
          }

          location.reload();
        } catch (error) {
          Swal.fire({
            icon: "error",

            title: "Network Error",

            text: error.message,
          });
        }
      }

      async function forceCleanupSession(id) {
        const conf = await Swal.fire({
          icon: "warning",

          title: "Force Reset Session",

          html: `Ini akan mereset session <b>${id}</b> dan membersihkan data bermasalah. Lanjutkan?`,

          showCancelButton: true,

          confirmButtonText: "Reset",
        });

        if (!conf.isConfirmed) return;

        try {
          const res = await fetch("/api/resetSession", {
            method: "POST",

            headers: { "Content-Type": "application/json" },

            body: JSON.stringify({ sessionId: id }),
          });

          const data = await res.json();

          if (data.success) {
            Swal.fire({ icon: "success", title: "Session di-reset" });
          } else {
            Swal.fire({
              icon: "error",

              title: "Reset gagal",

              text: data.error,
            });
          }

          location.reload();
        } catch (error) {
          Swal.fire({
            icon: "error",

            title: "Reset gagal",

            text: error.message,
          });
        }
      }

      async function deleteSessionPermanently(id) {
        const conf = await Swal.fire({
          icon: "warning",

          title: "Delete Session Permanently",

          html: `🗑️ Ini akan MENGHAPUS PERMANEN session <b>${id}</b> dan SEMUA file-nya!<br><br>⚠️ Aksi ini tidak bisa dibatalkan!<br><br>Anda perlu scan QR code lagi untuk reconnect.<br><br>Anda yakin?`,

          showCancelButton: true,

          confirmButtonText: "Hapus Permanen",

          confirmButtonColor: "#dc2626",
        });

        if (!conf.isConfirmed) return;

        try {
          const res = await fetch("/api/disconnectAndDelete", {
            method: "POST",

            headers: { "Content-Type": "application/json" },

            body: JSON.stringify({ sessionId: id }),
          });

          const data = await res.json();

          if (data.success) {
            Swal.fire({
              icon: "success",

              title: "Session dihapus permanen!",

              text: "Semua file telah dihapus.",
            });

            location.href = "/dashboard";
          } else {
            Swal.fire({
              icon: "error",

              title: "Gagal menghapus",

              text: data.error,
            });
          }
        } catch (error) {
          Swal.fire({
            icon: "error",

            title: "Gagal menghapus",

            text: error.message,
          });
        }
      }

      // Refresh Groups

      async function refreshGroups() {
        location.reload();
      }

      // Bot Settings Functions

      function saveBotSettings() {
        const settings = {
          enabled: document.getElementById("autoReplyToggle").checked,

          botType: document.getElementById("botTypeSelect").value,

          responses: {
            defaultResponse: document.getElementById("defaultResponse").value,

            greetingResponse: document.getElementById("greetingResponse").value,

            infoResponse: document.getElementById("infoResponse").value,

            goodbyeResponse: document.getElementById("goodbyeResponse").value,

            errorResponse: document.getElementById("errorResponse").value,
          },
        };

        const sessionId = document.getElementById("sessionIdInput").value;

        console.log("🤖 Saving bot settings:", { sessionId, settings });

        // Save to server

        fetch("/api/botSettings", {
          method: "POST",

          headers: {
            "Content-Type": "application/json",
          },

          body: JSON.stringify({
            sessionId: sessionId,

            enabled: settings.enabled,

            botType: settings.botType,

            responses: settings.responses,
          }),
        })
          .then((response) => response.json())

          .then((data) => {
            console.log("🤖 Bot settings save response:", data);

            if (data.success) {
              // Update original settings after successful save

              originalSettings = {
                enabled: document.getElementById("autoReplyToggle").checked,

                botType: document.getElementById("botTypeSelect").value,

                responses: {
                  defaultResponse:
                    document.getElementById("defaultResponse").value,

                  greetingResponse:
                    document.getElementById("greetingResponse").value,

                  infoResponse: document.getElementById("infoResponse").value,

                  goodbyeResponse:
                    document.getElementById("goodbyeResponse").value,

                  errorResponse: document.getElementById("errorResponse").value,
                },
              };

              // Update bot type display && feature status
              updateBotTypeDisplay(originalSettings.botType);

              markAsSaved();

              Swal.fire({
                icon: "success",

                title: "Settings Saved",

                text: "Bot settings have been updated successfully!",

                timer: 2000,

                showConfirmButton: false,
              });
            } else {
              throw new Error(data.error || "Failed to save settings");
            }
          })

          .catch((error) => {
            console.error("Error saving bot settings:", error);

            Swal.fire({
              icon: "error",

              title: "Error",

              text: "Failed to save bot settings: " + error.message,
            });
          });
      }

      function resetBotSettings() {
        Swal.fire({
          icon: "warning",

          title: "Reset Settings",

          text: "Are you sure you want to reset bot settings to default?",

          showCancelButton: true,

          confirmButtonText: "Reset",

          confirmButtonColor: "#dc2626",
        }).then((result) => {
          if (result.isConfirmed) {
            document.getElementById("autoReplyToggle").checked = true;

            document.getElementById("botTypeSelect").value = "menu_bot";

            document.getElementById("defaultResponse").value =
              "🤖 Halo! Silakan pilih menu yang tersedia atau ketik 'menu' untuk melihat pilihan.";

            document.getElementById("greetingResponse").value =
              "👋 Halo! Selamat datang! Ketik 'menu' untuk melihat pilihan yang tersedia.";

            document.getElementById("infoResponse").value =
              "ℹ️ Ini adalah bot menu. Ketik 'menu' untuk melihat pilihan atau ketik nomor menu yang diinginkan.";

            document.getElementById("goodbyeResponse").value =
              "👋 Terima kasih! Sampai jumpa lagi!";

            document.getElementById("errorResponse").value =
              "❌ Menu tidak ditemukan. Ketik 'menu' untuk melihat pilihan yang tersedia.";

            // Update bot type display && feature status
            updateBotTypeDisplay("general");

            Swal.fire({
              icon: "success",

              title: "Settings Reset",

              text: "Bot settings have been reset to default values.",

              timer: 2000,

              showConfirmButton: false,
            });
          }
        });
      }

      function loadBotTypeTemplate() {
        const selectedBotType = document.getElementById("botTypeSelect").value;

        Swal.fire({
          icon: "question",
          title: "Load Bot Template",
          text: `Load default template for ${selectedBotType} bot? This will replace current responses.`,
          showCancelButton: true,
          confirmButtonText: "Load Template",
          confirmButtonColor: "#7c3aed",
        }).then((result) => {
          if (result.isConfirmed) {
            // Fetch bot template from server
            fetch(`/api/botConfig/${selectedBotType}`)
              .then((response) => response.json())
              .then((data) => {
                if (data.success && data.config) {
                  const config = data.config;

                  // Update form fields with template values
                  document.getElementById("defaultResponse").value =
                    config.responses.defaultResponse;
                  document.getElementById("greetingResponse").value =
                    config.responses.greetingResponse;
                  document.getElementById("infoResponse").value =
                    config.responses.infoResponse;
                  document.getElementById("goodbyeResponse").value =
                    config.responses.goodbyeResponse;
                  document.getElementById("errorResponse").value =
                    config.responses.errorResponse;

                  // Update bot type display && feature status
                  updateBotTypeDisplay(selectedBotType);

                  Swal.fire({
                    icon: "success",
                    title: "Template Loaded",
                    text: `${config.name} template has been loaded successfully!`,
                    timer: 2000,
                    showConfirmButton: false,
                  });
                } else {
                  throw new Error(data.error || "Failed to load template");
                }
              })
              .catch((error) => {
                console.error("Error loading bot template:", error);
                Swal.fire({
                  icon: "error",
                  title: "Error",
                  text: "Failed to load bot template: " + error.message,
                });
              });
          }
        });
      }

      // Load saved bot settings on page load

      function loadBotSettings() {
        const sessionId = document.getElementById("sessionIdInput").value;

        console.log("🤖 Loading bot settings for session:", sessionId);

        // Load from server

        fetch(`/api/botSettings/${sessionId}`)
          .then((response) => response.json())

          .then((data) => {
            console.log("🤖 Bot settings load response:", data);

            if (data.settings) {
              const settings = data.settings;

              document.getElementById("autoReplyToggle").checked =
                settings.enabled;

              document.getElementById("botTypeSelect").value =
                settings.botType || "menu_bot";

              document.getElementById("defaultResponse").value =
                settings.responses?.defaultResponse ||
                "🤖 Halo! Silakan pilih menu yang tersedia atau ketik 'menu' untuk melihat pilihan.";

              document.getElementById("greetingResponse").value =
                settings.responses?.greetingResponse ||
                "👋 Halo! Selamat datang! Ketik 'menu' untuk melihat pilihan yang tersedia.";

              document.getElementById("infoResponse").value =
                settings.responses?.infoResponse ||
                "ℹ️ Ini adalah bot menu. Ketik 'menu' untuk melihat pilihan atau ketik nomor menu yang diinginkan.";

              document.getElementById("goodbyeResponse").value =
                settings.responses?.goodbyeResponse ||
                "👋 Terima kasih! Sampai jumpa lagi!";

              document.getElementById("errorResponse").value =
                settings.responses?.errorResponse ||
                "❌ Menu tidak ditemukan. Ketik 'menu' untuk melihat pilihan yang tersedia.";

              // Update toggle visual state

              updateToggleVisual();

              // Update bot type display && feature status

              updateBotTypeDisplay(settings.botType);

              console.log("🤖 Bot settings loaded successfully");
            }
          })

          .catch((error) => {
            console.error("Error loading bot settings:", error);

            // Use default values if server fails

            document.getElementById("autoReplyToggle").checked = true;

            document.getElementById("defaultResponse").value =
              "🤖 Halo! Silakan pilih menu yang tersedia atau ketik 'menu' untuk melihat pilihan.";

            document.getElementById("greetingResponse").value =
              "👋 Halo! Selamat datang! Ketik 'menu' untuk melihat pilihan yang tersedia.";

            document.getElementById("infoResponse").value =
              "ℹ️ Ini adalah bot menu. Ketik 'menu' untuk melihat pilihan atau ketik nomor menu yang diinginkan.";
          });
      }

      function updateToggleVisual() {
        const toggle = document.getElementById("autoReplyToggle");

        const toggleBg = document.getElementById("toggleBg");

        const toggleCircle = document.getElementById("toggleCircle");

        if (toggle.checked) {
          toggleBg.classList.remove("bg-gray-300");

          toggleBg.classList.add("bg-green-500");

          toggleCircle.classList.remove("translate-x-0");

          toggleCircle.classList.add("translate-x-5");
        } else {
          toggleBg.classList.remove("bg-green-500");

          toggleBg.classList.add("bg-gray-300");

          toggleCircle.classList.remove("translate-x-5");

          toggleCircle.classList.add("translate-x-0");
        }
      }

      function updateBotTypeDisplay(botType) {
        const botTypeDisplay = document.getElementById("currentBotType");
        if (botTypeDisplay) {
          const typeNames = {
            general: "General",
            customer_service: "Customer Service",
            marketing: "Marketing",
            support: "Support",
          };
          botTypeDisplay.textContent = typeNames[botType] || "General";
        }

        // Update feature status based on bot type
        updateFeatureStatus(botType);
      }

      function updateFeatureStatus(botType) {
        const groupReplyStatus = document.getElementById("groupReplyStatus");
        const mediaSupportStatus =
          document.getElementById("mediaSupportStatus");

        if (groupReplyStatus && mediaSupportStatus) {
          const features = {
            general: { groupReply: false, mediaSupport: false },
            customer_service: { groupReply: false, mediaSupport: true },
            marketing: { groupReply: true, mediaSupport: true },
            support: { groupReply: false, mediaSupport: true },
          };

          const botFeatures = features[botType] || features.general;

          groupReplyStatus.textContent = botFeatures.groupReply
            ? "✓ Enabled"
            : "✗ Disabled";
          groupReplyStatus.className = botFeatures.groupReply
            ? "bg-green-100 text-green-800 px-2 py-1 rounded text-xs"
            : "bg-red-100 text-red-800 px-2 py-1 rounded text-xs";

          mediaSupportStatus.textContent = botFeatures.mediaSupport
            ? "✓ Enabled"
            : "✗ Disabled";
          mediaSupportStatus.className = botFeatures.mediaSupport
            ? "bg-green-100 text-green-800 px-2 py-1 rounded text-xs"
            : "bg-red-100 text-red-800 px-2 py-1 rounded text-xs";
        }
      }

      // Keyboard shortcuts

      document.addEventListener("keydown", function (event) {
        if (event.key === "Escape") {
          const modal = document.getElementById("qrModal");

          if (!modal.classList.contains("hidden")) {
            closeQRModal();
          }
        }
      });

      // Initialize bot settings on page load
      console.log("📋 Page loaded, initializing...");
      console.log("📋 Session data from server:", {
        id: "<%= session.id %>",
        current_menu_id: "<%= session.current_menu_id %>",
        status: "<%= session.status %>",
      });

      // Debug: Check if current_menu_id is available
      const currentMenuIdFromServer = "<%= session.current_menu_id %>";
      console.log(
        "📋 Current Menu ID from server (raw):",
        currentMenuIdFromServer
      );
      console.log(
        "📋 Current Menu ID from server (type):",
        typeof currentMenuIdFromServer
      );
      console.log(
        "📋 Current Menu ID from server (length):",
        currentMenuIdFromServer.length
      );

      // Check if current_menu_id is null or undefined
      if (
        currentMenuIdFromServer === "null" ||
        currentMenuIdFromServer === "undefined" ||
        currentMenuIdFromServer === ""
      ) {
        console.warn("⚠️ Current Menu ID is null, undefined, or empty!");
      } else {
        console.log("✅ Current Menu ID has a value:", currentMenuIdFromServer);
      }

      // Initialize all components
      loadBotSettings();
      loadGroups();
      loadBotLogic();

      // Load current menu settings - simplified version using server-side data
      function loadCurrentMenuSettings() {
        console.log("📋 Loading current menu settings from server-side data...");
        
        // Data sudah tersedia dari server-side, tidak perlu API call
        console.log("📋 Session menus from server:", <%= JSON.stringify(session.menus) %>);
        console.log("📋 Current menu ID from server:", "<%= session.current_menu_id %>");
        
        // Update display dengan data dari server
        const display = document.getElementById("currentMenuIdDisplay");
        if (display) {
          display.textContent = "<%= session.current_menu_id || 'None' %>";
          console.log("📋 Display updated with server data");
        }
        
        console.log("📋 Current menu settings loaded successfully!");
      }

      // Call the function immediately
      console.log("📋 About to call loadCurrentMenuSettings...");
      console.log("📋 Document ready state:", document.readyState);
      
      // Wait for DOM to be ready
      if (document.readyState === 'loading') {
        console.log("📋 DOM still loading, waiting for DOMContentLoaded...");
        document.addEventListener('DOMContentLoaded', function() {
          console.log("📋 DOMContentLoaded fired, calling loadCurrentMenuSettings...");
          loadCurrentMenuSettings();
        });
      } else {
        console.log("📋 DOM already ready, calling loadCurrentMenuSettings immediately...");
        loadCurrentMenuSettings();
      }
      
      console.log("📋 loadCurrentMenuSettings call initiated");

      // Toggle switch functionality

      document

        .getElementById("autoReplyToggle")

        .addEventListener("change", function () {
          console.log("🤖 Auto-reply toggle changed:", this.checked);

          updateToggleVisual();

          // Don't auto-save, wait for manual save
        });

      // Track changes && update save button appearance

      let hasUnsavedChanges = false;

      let originalSettings = {};

      function markAsChanged() {
        hasUnsavedChanges = true;

        const saveBtn = document.getElementById("saveSettingsBtn");

        if (saveBtn) {
          saveBtn.classList.remove(
            "from-green-500",

            "to-green-600",

            "hover:from-green-600",

            "hover:to-green-700"
          );

          saveBtn.classList.add(
            "from-blue-500",

            "to-blue-600",

            "hover:from-blue-600",

            "hover:to-blue-700"
          );

          saveBtn.innerHTML =
            '<i class="fas fa-exclamation-circle"></i><span>Save Changes</span>';
        }
      }

      function markAsSaved() {
        hasUnsavedChanges = false;

        const saveBtn = document.getElementById("saveSettingsBtn");

        if (saveBtn) {
          saveBtn.classList.remove(
            "from-blue-500",

            "to-blue-600",

            "hover:from-blue-600",

            "hover:to-blue-700"
          );

          saveBtn.classList.add(
            "from-green-500",

            "to-green-600",

            "hover:from-green-600",

            "hover:to-green-700"
          );

          saveBtn.innerHTML =
            '<i class="fas fa-save"></i><span>Save Settings</span>';
        }
      }

      function checkForChanges() {
        const currentSettings = {
          enabled: document.getElementById("autoReplyToggle").checked,

          botType: document.getElementById("botTypeSelect").value,

          responses: {
            defaultResponse: document.getElementById("defaultResponse").value,

            greetingResponse: document.getElementById("greetingResponse").value,

            infoResponse: document.getElementById("infoResponse").value,

            goodbyeResponse: document.getElementById("goodbyeResponse").value,

            errorResponse: document.getElementById("errorResponse").value,
          },
        };

        const hasChanges =
          JSON.stringify(currentSettings) !== JSON.stringify(originalSettings);

        if (hasChanges && !hasUnsavedChanges) {
          markAsChanged();
        } else if (!hasChanges && hasUnsavedChanges) {
          markAsSaved();
        }
      }

      // Add change detection to all form elements

      document.addEventListener("DOMContentLoaded", function () {
        // Store original settings after loading
        setTimeout(() => {
          originalSettings = {
            enabled: document.getElementById("autoReplyToggle").checked,
            botType: document.getElementById("botTypeSelect").value,
            responses: {
              defaultResponse: document.getElementById("defaultResponse").value,
              greetingResponse:
                document.getElementById("greetingResponse").value,
              infoResponse: document.getElementById("infoResponse").value,
              goodbyeResponse: document.getElementById("goodbyeResponse").value,
              errorResponse: document.getElementById("errorResponse").value,
            },
          };

          // Update bot type display && feature status on initialization
          updateBotTypeDisplay(originalSettings.botType);
        }, 1000);

        // Add event listeners for change detection
        document
          .getElementById("autoReplyToggle")
          .addEventListener("change", checkForChanges);
        document
          .getElementById("defaultResponse")
          .addEventListener("input", checkForChanges);
        document
          .getElementById("greetingResponse")
          .addEventListener("input", checkForChanges);
        document
          .getElementById("infoResponse")
          .addEventListener("input", checkForChanges);
        document
          .getElementById("goodbyeResponse")
          .addEventListener("input", checkForChanges);
        document
          .getElementById("errorResponse")
          .addEventListener("input", checkForChanges);
        document
          .getElementById("botTypeSelect")
          .addEventListener("change", function () {
            checkForChanges();
            // Auto-load template when bot type changes
            if (this.value !== originalSettings.botType) {
              loadBotTypeTemplate();
            }
          });
      });

      // Current Menu Management Functions

      async function loadCurrentMenuSettings() {
        console.log("📋 Loading current menu settings...");

        // Get current menu ID from tb_sessions (via server data)
        const currentMenuId = "<%= session.current_menu_id %>";
        console.log("📋 Current menu ID from tb_sessions:", currentMenuId);

        // Get UI elements
        const select = document.getElementById("currentMenuSelect");
        const display = document.getElementById("currentMenuIdDisplay");

        // Show loading state
        select.innerHTML = '<option value="">Loading menus...</option>';
        display.textContent = currentMenuId || "None";

        try {
          // Load dropdown options from tb_menu
          console.log("📋 Loading dropdown options from tb_menu...");
          const menusResponse = await fetch("/api/menus");
          const menusData = await menusResponse.json();
          console.log("📋 Menus from tb_menu:", menusData);

          if (menusData.success && Array.isArray(menusData.menus)) {
            // Clear && populate dropdown with tb_menu data
            select.innerHTML = '<option value="">Select a menu...</option>';

            menusData.menus.forEach((menu) => {
              const option = document.createElement("option");
              option.value = String(menu.id); // ID from tb_menu
              option.textContent = `${menu.name} (ID: ${menu.id})`; // Name from tb_menu
              select.appendChild(option);
            });

            // Set selected value from tb_sessions.current_menu_id
            if (
              currentMenuId &&
              currentMenuId !== "null" &&
              currentMenuId !== "undefined"
            ) {
              const currentMenuIdStr = String(currentMenuId);
              select.value = currentMenuIdStr;
              console.log(
                "📋 Set dropdown value from tb_sessions.current_menu_id:",
                currentMenuIdStr
              );
            } else {
              console.log("📋 No current menu ID set in tb_sessions");
            }
          } else {
            console.error("📋 Failed to load menus from tb_menu:", menusData);
            select.innerHTML = '<option value="">No menus available</option>';

            Swal.fire({
              icon: "warning",
              title: "No Menus Available",
              text: "No menus found in tb_menu table. Please add some menus first.",
              timer: 3000,
              showConfirmButton: false,
            });
          }
        } catch (error) {
          console.error("Error loading menu settings:", error);

          // Show error in UI
          select.innerHTML = '<option value="">Error loading menus</option>';
          display.textContent = "Error";

          Swal.fire({
            icon: "error",
            title: "Error Loading Menu Settings",
            text: "Failed to load menu settings: " + error.message,
            timer: 5000,
            showConfirmButton: false,
          });
        }
      }

      async function updateCurrentMenu() {
        const sessionId = document.getElementById("sessionIdInput").value;
        const selectedMenuId =
          document.getElementById("currentMenuSelect").value;

        if (!selectedMenuId) {
          Swal.fire({
            icon: "warning",
            title: "No Menu Selected",
            text: "Please select a menu first.",
          });
          return;
        }

        try {
          const response = await fetch("/api/sessions/updateCurrentMenu", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              sessionId: sessionId,
              currentMenuId: parseInt(selectedMenuId),
            }),
          });

          const data = await response.json();

          if (data.success) {
            document.getElementById("currentMenuIdDisplay").textContent =
              selectedMenuId;

            Swal.fire({
              icon: "success",
              title: "Menu Updated",
              text: `Current menu has been set to ID: ${selectedMenuId}`,
              timer: 2000,
              showConfirmButton: false,
            });
          } else {
            throw new Error(data.error || "Failed to update menu");
          }
        } catch (error) {
          console.error("Error updating current menu:", error);
          Swal.fire({
            icon: "error",
            title: "Error",
            text: "Failed to update current menu: " + error.message,
          });
        }
      }

      async function resetCurrentMenu() {
        const sessionId = document.getElementById("sessionIdInput").value;

        const confirm = await Swal.fire({
          icon: "question",
          title: "Reset Current Menu",
          text: "Are you sure you want to reset the current menu? This will set it to null.",
          showCancelButton: true,
          confirmButtonText: "Reset",
          confirmButtonColor: "#dc2626",
        });

        if (!confirm.isConfirmed) return;

        try {
          const response = await fetch("/api/sessions/updateCurrentMenu", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              sessionId: sessionId,
              currentMenuId: null,
            }),
          });

          const data = await response.json();

          if (data.success) {
            document.getElementById("currentMenuIdDisplay").textContent =
              "None";
            document.getElementById("currentMenuSelect").value = "";

            Swal.fire({
              icon: "success",
              title: "Menu Reset",
              text: "Current menu has been reset to null",
              timer: 2000,
              showConfirmButton: false,
            });
          } else {
            throw new Error(data.error || "Failed to reset menu");
          }
        } catch (error) {
          console.error("Error resetting current menu:", error);
          Swal.fire({
            icon: "error",
            title: "Error",
            text: "Failed to reset current menu: " + error.message,
          });
        }
      }

      // Initialize toggle switch on page load

      document.addEventListener("DOMContentLoaded", function () {
        updateToggleVisual();
      });
    </script>
  </body>
</html>
