<!DOCTYPE html>
<html lang="id">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>CRUD Menu Management</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"
      rel="stylesheet"
    />
    <style>
      .gradient-bg {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      }
      .card-hover {
        transition: all 0.3s ease;
      }
      .card-hover:hover {
        transform: translateY(-2px);
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
      }
      .btn-primary {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      }
      .btn-success {
        background: linear-gradient(135deg, #10b981, #059669);
      }
      .btn-warning {
        background: linear-gradient(135deg, #f59e0b, #d97706);
      }
      .btn-danger {
        background: linear-gradient(135deg, #ef4444, #dc2626);
      }

      /* Compact table styles */
      .compact-table {
        font-size: 0.75rem;
        line-height: 1.2;
      }

      .compact-table th {
        padding: 0.375rem 0.5rem;
        font-size: 0.6875rem;
        font-weight: 600;
        background-color: #f9fafb;
        border-bottom: 1px solid #e5e7eb;
      }

      .compact-table td {
        padding: 0.375rem 0.5rem;
        font-size: 0.75rem;
        vertical-align: middle;
      }

      .compact-table tr:hover {
        background-color: #f9fafb;
      }

      .keyword-badge {
        background-color: #f3f4f6;
        color: #374151;
        padding: 0.125rem 0.375rem;
        border-radius: 0.25rem;
        font-family: "Courier New", monospace;
        font-size: 0.6875rem;
        font-weight: 600;
      }

      .action-btn {
        padding: 0.25rem 0.5rem;
        font-size: 0.6875rem;
        min-width: 1.5rem;
        min-height: 1.5rem;
      }

      /* Responsive table improvements */
      @media (max-width: 768px) {
        .compact-table th,
        .compact-table td {
          padding: 0.25rem 0.375rem;
          font-size: 0.625rem;
        }

        .action-btn {
          padding: 0.125rem 0.25rem;
          font-size: 0.625rem;
          min-width: 1.25rem;
          min-height: 1.25rem;
        }

        .keyword-badge {
          font-size: 0.625rem;
          padding: 0.125rem 0.25rem;
        }
      }

      /* Table scroll improvements */
      .overflow-x-auto {
        scrollbar-width: thin;
        scrollbar-color: #cbd5e1 #f1f5f9;
      }

      .overflow-x-auto::-webkit-scrollbar {
        height: 6px;
      }

      .overflow-x-auto::-webkit-scrollbar-track {
        background: #f1f5f9;
        border-radius: 3px;
      }

      .overflow-x-auto::-webkit-scrollbar-thumb {
        background: #cbd5e1;
        border-radius: 3px;
      }

      .overflow-x-auto::-webkit-scrollbar-thumb:hover {
        background: #94a3b8;
      }
    </style>
  </head>
  <body class="bg-gray-100">
    <!-- Header -->
    <div class="gradient-bg text-white py-4 px-6 shadow-lg">
      <div class="flex items-center justify-between">
        <h1 class="text-2xl font-bold">
          <i class="fas fa-cogs mr-2"></i>
          Menu Management System
        </h1>
        <div class="flex space-x-4">
          <button
            onclick="refreshData()"
            class="bg-white bg-opacity-20 hover:bg-opacity-30 px-4 py-2 rounded-lg transition-all"
          >
            <i class="fas fa-sync-alt mr-2"></i>Refresh
          </button>
          <a
            href="/dashboard"
            class="bg-white bg-opacity-20 hover:bg-opacity-30 px-4 py-2 rounded-lg transition-all"
          >
            <i class="fas fa-arrow-left mr-2"></i>Back to Dashboard
          </a>
        </div>
      </div>
    </div>

    <!-- Main Content -->
    <div class="container mx-auto px-6 py-8">
      <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <!-- Kolom 1: TB_MENU -->
        <div class="bg-white rounded-lg shadow-lg p-6">
          <div class="flex items-center justify-between mb-6">
            <h2 class="text-xl font-bold text-gray-800">
              <i class="fas fa-list mr-2 text-blue-600"></i>
              Master Menu (tb_menu)
            </h2>
            <button
              onclick="openMenuModal()"
              class="btn-primary text-white px-4 py-2 rounded-lg hover:opacity-90 transition-all"
            >
              <i class="fas fa-plus mr-2"></i>Add Menu
            </button>
          </div>

          <div class="overflow-x-auto">
            <table class="w-full compact-table">
              <thead>
                <tr>
                  <th>ID</th>
                  <th>Name</th>
                  <th>Remark</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody id="menuTableBody">
                <!-- Data akan dimuat via JavaScript -->
              </tbody>
            </table>
          </div>
        </div>

        <!-- Kolom 2 & 3: TB_BOTMENU -->
        <div class="lg:col-span-2 bg-white rounded-lg shadow-lg p-6">
          <div class="flex items-center justify-between mb-6">
            <h2 class="text-xl font-bold text-gray-800">
              <i class="fas fa-robot mr-2 text-green-600"></i>
              Bot Menu (tb_botmenu)
            </h2>
            <div class="flex space-x-2">
              <select
                id="menuFilter"
                class="px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="">All Menus</option>
              </select>
              <button
                onclick="openBotMenuModal()"
                class="btn-success text-white px-4 py-2 rounded-lg hover:opacity-90 transition-all"
              >
                <i class="fas fa-plus mr-2"></i>Add Bot Menu
              </button>
            </div>
          </div>

          <div class="overflow-x-auto">
            <table class="w-full compact-table">
              <thead>
                <tr>
                  <th>ID</th>
                  <th>Menu ID</th>
                  <th>Parent ID</th>
                  <th>Keyword</th>
                  <th>Description</th>
                  <th>URL</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody id="botMenuTableBody">
                <!-- Data akan dimuat via JavaScript -->
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>

    <!-- Modal untuk TB_MENU -->
    <div
      id="menuModal"
      class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50"
    >
      <div class="bg-white rounded-lg p-6 w-full max-w-md mx-4">
        <div class="flex items-center justify-between mb-4">
          <h3 class="text-lg font-bold text-gray-800" id="menuModalTitle">
            Add Menu
          </h3>
          <button
            onclick="closeMenuModal()"
            class="text-gray-500 hover:text-gray-700"
          >
            <i class="fas fa-times"></i>
          </button>
        </div>

        <form id="menuForm">
          <input type="hidden" id="menuId" name="id" />

          <div class="mb-4">
            <label class="block text-sm font-medium text-gray-700 mb-2"
              >Name</label
            >
            <input
              type="text"
              id="menuName"
              name="name"
              class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              required
            />
          </div>

          <div class="mb-6">
            <label class="block text-sm font-medium text-gray-700 mb-2"
              >Remark</label
            >
            <textarea
              id="menuRemark"
              name="remark"
              rows="3"
              class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              required
            ></textarea>
          </div>

          <div class="flex justify-end space-x-3">
            <button
              type="button"
              onclick="closeMenuModal()"
              class="px-4 py-2 text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50 transition-all"
            >
              Cancel
            </button>
            <button
              type="submit"
              class="btn-primary text-white px-4 py-2 rounded-lg hover:opacity-90 transition-all"
            >
              <i class="fas fa-save mr-2"></i>Save
            </button>
          </div>
        </form>
      </div>
    </div>

    <!-- Modal untuk TB_BOTMENU -->
    <div
      id="botMenuModal"
      class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50"
    >
      <div class="bg-white rounded-lg p-6 w-full max-w-2xl mx-4">
        <div class="flex items-center justify-between mb-4">
          <h3 class="text-lg font-bold text-gray-800" id="botMenuModalTitle">
            Add Bot Menu
          </h3>
          <button
            onclick="closeBotMenuModal()"
            class="text-gray-500 hover:text-gray-700"
          >
            <i class="fas fa-times"></i>
          </button>
        </div>

        <form id="botMenuForm">
          <input type="hidden" id="botMenuId" name="id" />

          <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2"
                >Menu ID</label
              >
              <select
                id="botMenuMenuId"
                name="menu_id"
                class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                required
              >
                <option value="">Select Menu</option>
              </select>
            </div>

            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2"
                >Parent ID</label
              >
              <select
                id="botMenuParentId"
                name="parent_id"
                class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="">None (Main Menu)</option>
              </select>
            </div>
          </div>

          <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2"
                >Keyword</label
              >
              <input
                type="text"
                id="botMenuKeyword"
                name="keyword"
                class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                required
              />
            </div>

            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2"
                >Description</label
              >
              <input
                type="text"
                id="botMenuDescription"
                name="description"
                class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                required
              />
            </div>
          </div>

          <div class="mb-6">
            <label class="block text-sm font-medium text-gray-700 mb-2"
              >URL</label
            >
            <textarea
              id="botMenuUrl"
              name="url"
              rows="3"
              class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="Enter API URL or leave empty"
            ></textarea>
          </div>

          <div class="flex justify-end space-x-3">
            <button
              type="button"
              onclick="closeBotMenuModal()"
              class="px-4 py-2 text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50 transition-all"
            >
              Cancel
            </button>
            <button
              type="submit"
              class="btn-success text-white px-4 py-2 rounded-lg hover:opacity-90 transition-all"
            >
              <i class="fas fa-save mr-2"></i>Save
            </button>
          </div>
        </form>
      </div>
    </div>

    <script>
      // Global variables
      let menus = [];
      let botMenus = [];

      // Initialize page
      document.addEventListener("DOMContentLoaded", function () {
        loadMenus();
        loadBotMenus();
      });

      // Load menus data
      async function loadMenus() {
        try {
          const response = await fetch("/api/menus");
          menus = await response.json();
          renderMenuTable();
          updateMenuSelects();
        } catch (error) {
          console.error("Error loading menus:", error);
          Swal.fire("Error", "Failed to load menus", "error");
        }
      }

      // Load bot menus data
      async function loadBotMenus() {
        try {
          const response = await fetch("/api/botmenus");
          botMenus = await response.json();
          renderBotMenuTable();
          updateBotMenuSelects();
        } catch (error) {
          console.error("Error loading bot menus:", error);
          Swal.fire("Error", "Failed to load bot menus", "error");
        }
      }

      // Render menu table
      function renderMenuTable() {
        const tbody = document.getElementById("menuTableBody");
        tbody.innerHTML = "";

        menus.forEach((menu) => {
          const row = document.createElement("tr");
          row.innerHTML = `
                    <td class="font-mono text-gray-800">${menu.id}</td>
                    <td class="font-medium text-gray-800">${menu.name}</td>
                    <td class="text-gray-600">${menu.remark}</td>
                    <td>
                        <div class="flex space-x-1">
                            <button onclick="editMenu(${menu.id})" class="btn-warning text-white action-btn rounded hover:opacity-90 transition-all">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button onclick="deleteMenu(${menu.id})" class="btn-danger text-white action-btn rounded hover:opacity-90 transition-all">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </td>
                `;
          tbody.appendChild(row);
        });
      }

      // Render bot menu table
      function renderBotMenuTable() {
        const tbody = document.getElementById("botMenuTableBody");
        tbody.innerHTML = "";

        botMenus.forEach((botMenu) => {
          const row = document.createElement("tr");
          row.innerHTML = `
                    <td class="font-mono text-gray-800">${botMenu.id}</td>
                    <td class="font-mono text-gray-800">${botMenu.menu_id}</td>
                    <td class="font-mono text-gray-600">${
                      botMenu.parent_id || "-"
                    }</td>
                    <td><span class="keyword-badge">${
                      botMenu.keyword
                    }</span></td>
                    <td class="font-medium text-gray-800">${
                      botMenu.description
                    }</td>
                    <td class="text-gray-600 max-w-xs truncate font-mono">${
                      botMenu.url || "-"
                    }</td>
                    <td>
                        <div class="flex space-x-1">
                            <button onclick="editBotMenu(${
                              botMenu.id
                            })" class="btn-warning text-white action-btn rounded hover:opacity-90 transition-all">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button onclick="deleteBotMenu(${
                              botMenu.id
                            })" class="btn-danger text-white action-btn rounded hover:opacity-90 transition-all">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </td>
                `;
          tbody.appendChild(row);
        });
      }

      // Update menu selects
      function updateMenuSelects() {
        const menuFilter = document.getElementById("menuFilter");
        const botMenuMenuId = document.getElementById("botMenuMenuId");

        // Update filter dropdown
        menuFilter.innerHTML = '<option value="">All Menus</option>';
        menus.forEach((menu) => {
          menuFilter.innerHTML += `<option value="${menu.id}">${menu.name}</option>`;
        });

        // Update bot menu form dropdown
        botMenuMenuId.innerHTML = '<option value="">Select Menu</option>';
        menus.forEach((menu) => {
          botMenuMenuId.innerHTML += `<option value="${menu.id}">${menu.name}</option>`;
        });
      }

      // Update bot menu selects
      function updateBotMenuSelects() {
        const botMenuParentId = document.getElementById("botMenuParentId");

        // Get main menus (parent_id is null)
        const mainMenus = botMenus.filter((bm) => bm.parent_id === null);

        botMenuParentId.innerHTML =
          '<option value="">None (Main Menu)</option>';
        mainMenus.forEach((menu) => {
          botMenuParentId.innerHTML += `<option value="${menu.id}">${menu.keyword} - ${menu.description}</option>`;
        });
      }

      // Menu Modal Functions
      function openMenuModal(menuId = null) {
        const modal = document.getElementById("menuModal");
        const title = document.getElementById("menuModalTitle");
        const form = document.getElementById("menuForm");

        if (menuId) {
          const menu = menus.find((m) => m.id === menuId);
          title.textContent = "Edit Menu";
          document.getElementById("menuId").value = menu.id;
          document.getElementById("menuName").value = menu.name;
          document.getElementById("menuRemark").value = menu.remark;
        } else {
          title.textContent = "Add Menu";
          form.reset();
        }

        modal.classList.remove("hidden");
        modal.classList.add("flex");
      }

      function closeMenuModal() {
        const modal = document.getElementById("menuModal");
        modal.classList.add("hidden");
        modal.classList.remove("flex");
        document.getElementById("menuForm").reset();
      }

      // Bot Menu Modal Functions
      function openBotMenuModal(botMenuId = null) {
        const modal = document.getElementById("botMenuModal");
        const title = document.getElementById("botMenuModalTitle");
        const form = document.getElementById("botMenuForm");

        if (botMenuId) {
          const botMenu = botMenus.find((bm) => bm.id === botMenuId);
          title.textContent = "Edit Bot Menu";
          document.getElementById("botMenuId").value = botMenu.id;
          document.getElementById("botMenuMenuId").value = botMenu.menu_id;
          document.getElementById("botMenuParentId").value =
            botMenu.parent_id || "";
          document.getElementById("botMenuKeyword").value = botMenu.keyword;
          document.getElementById("botMenuDescription").value =
            botMenu.description;
          document.getElementById("botMenuUrl").value = botMenu.url || "";
        } else {
          title.textContent = "Add Bot Menu";
          form.reset();
        }

        modal.classList.remove("hidden");
        modal.classList.add("flex");
      }

      function closeBotMenuModal() {
        const modal = document.getElementById("botMenuModal");
        modal.classList.add("hidden");
        modal.classList.remove("flex");
        document.getElementById("botMenuForm").reset();
      }

      // Edit functions
      function editMenu(id) {
        openMenuModal(id);
      }

      function editBotMenu(id) {
        openBotMenuModal(id);
      }

      // Delete functions
      async function deleteMenu(id) {
        const result = await Swal.fire({
          title: "Are you sure?",
          text: "You won't be able to revert this!",
          icon: "warning",
          showCancelButton: true,
          confirmButtonColor: "#ef4444",
          cancelButtonColor: "#6b7280",
          confirmButtonText: "Yes, delete it!",
        });

        if (result.isConfirmed) {
          try {
            const response = await fetch(`/api/menus/${id}`, {
              method: "DELETE",
            });

            if (response.ok) {
              Swal.fire("Deleted!", "Menu has been deleted.", "success");
              loadMenus();
            } else {
              Swal.fire("Error", "Failed to delete menu", "error");
            }
          } catch (error) {
            console.error("Error deleting menu:", error);
            Swal.fire("Error", "Failed to delete menu", "error");
          }
        }
      }

      async function deleteBotMenu(id) {
        const result = await Swal.fire({
          title: "Are you sure?",
          text: "You won't be able to revert this!",
          icon: "warning",
          showCancelButton: true,
          confirmButtonColor: "#ef4444",
          cancelButtonColor: "#6b7280",
          confirmButtonText: "Yes, delete it!",
        });

        if (result.isConfirmed) {
          try {
            const response = await fetch(`/api/botmenus/${id}`, {
              method: "DELETE",
            });

            if (response.ok) {
              Swal.fire("Deleted!", "Bot menu has been deleted.", "success");
              loadBotMenus();
            } else {
              Swal.fire("Error", "Failed to delete bot menu", "error");
            }
          } catch (error) {
            console.error("Error deleting bot menu:", error);
            Swal.fire("Error", "Failed to delete bot menu", "error");
          }
        }
      }

      // Form submissions
      document
        .getElementById("menuForm")
        .addEventListener("submit", async function (e) {
          e.preventDefault();

          const formData = new FormData(this);
          const data = Object.fromEntries(formData);

          try {
            const url = data.id ? `/api/menus/${data.id}` : "/api/menus";
            const method = data.id ? "PUT" : "POST";

            const response = await fetch(url, {
              method: method,
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify(data),
            });

            if (response.ok) {
              Swal.fire(
                "Success",
                data.id
                  ? "Menu updated successfully!"
                  : "Menu created successfully!",
                "success"
              );
              closeMenuModal();
              loadMenus();
            } else {
              const errorData = await response.json();
              Swal.fire(
                "Error",
                errorData.error || "Failed to save menu",
                "error"
              );
            }
          } catch (error) {
            console.error("Error saving menu:", error);
            Swal.fire("Error", "Failed to save menu", "error");
          }
        });

      document
        .getElementById("botMenuForm")
        .addEventListener("submit", async function (e) {
          e.preventDefault();
          console.log("Bot menu form submitted");

          const formData = new FormData(this);
          const data = Object.fromEntries(formData);
          console.log("Form data:", data);

          // Convert empty strings to null for optional fields
          if (data.parent_id === "") data.parent_id = null;
          if (data.url === "") data.url = null;

          try {
            const url = data.id ? `/api/botmenus/${data.id}` : "/api/botmenus";
            const method = data.id ? "PUT" : "POST";
            console.log("Sending request to:", url, "Method:", method);

            const response = await fetch(url, {
              method: method,
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify(data),
            });

            console.log("Response status:", response.status);
            console.log("Response ok:", response.ok);

            if (response.ok) {
              const result = await response.json();
              console.log("Success response:", result);
              Swal.fire(
                "Success",
                data.id
                  ? "Bot menu updated successfully!"
                  : "Bot menu created successfully!",
                "success"
              );
              closeBotMenuModal();
              loadBotMenus();
            } else {
              const errorData = await response.json();
              console.log("Error response:", errorData);
              Swal.fire(
                "Error",
                errorData.error || "Failed to save bot menu",
                "error"
              );
            }
          } catch (error) {
            console.error("Error saving bot menu:", error);
            Swal.fire("Error", "Failed to save bot menu", "error");
          }
        });

      // Filter functionality
      document
        .getElementById("menuFilter")
        .addEventListener("change", function () {
          const filterValue = this.value;
          const rows = document.querySelectorAll("#botMenuTableBody tr");

          rows.forEach((row) => {
            const menuIdCell = row.cells[1];
            if (filterValue === "" || menuIdCell.textContent === filterValue) {
              row.style.display = "";
            } else {
              row.style.display = "none";
            }
          });
        });

      // Refresh data
      function refreshData() {
        loadMenus();
        loadBotMenus();
        Swal.fire("Refreshed!", "Data has been refreshed.", "success");
      }
    </script>
  </body>
</html>
